name: 'CI-CD Pipeline $(Date:yyyy-MM-dd)-$(Rev:rr)'

pr: none

trigger:
  - main
  - feature/*
    
pool:
  vmImage: 'ubuntu-20.04'
  
variables:
  - group: 'AccessTokens'
  - name: buildConfiguration
    value: 'Release'
  - name: appWorkingDir
    value: '$(System.DefaultWorkingDirectory)/src/CloudEng.Pipelines.Trigger'
  - name: azureSubscriptionName
    value: 'Azure Service Connection'
    
stages:
  - stage: update_infrastructure
    displayName: 'Prepare Azure infrastructure'
    jobs:
      - job: Infrastructure
        variables:
          stackName: 'production'
          infra_project_dir: '$(System.DefaultWorkingDirectory)/src/CloudEng.Pipelines.Infrastructure.Azure'
        steps:
          - checkout: self
            displayName: 'Checkout code'
            fetchDepth: 1            
          - task: Pulumi@1
            displayName: 'Pulumi up'
            inputs:
              azureSubscription: $(azureSubscriptionName)
              command: 'up'
              args: '--yes'
              cwd: '$(infra_project_dir)'
              stack: '$(stackName)'

          - script: |
              echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]$(pulumi stack output --cwd '$(infra_project_dir)/' FunctionAppName)"
            displayName: 'Set stack outputs as variables'
            name: 'pulumi'

  - stage: build_application
    displayName: 'Build and Pack Azure Function App'
    dependsOn: []
    jobs:
      - job: Build
        steps:
          - checkout: self
            displayName: 'Checkout code'
            fetchDepth: 1

          - task: DotNetCoreCLI@2
            displayName: 'Build Azure Function'
            inputs:
              command: 'build'
              projects: '$(appWorkingDir)/*.csproj'
              arguments: '--output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration)'
                
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Publish Artifact'
            artifact: 'WebhookFunction'
            
      - job: test
        displayName: 'Run Unit tests'
        steps:
          - checkout: self
            displayName: 'Checkout code'
            fetchDepth: 1
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              arguments: '--filter "FullyQualifiedName!~ApiTests"'
                         
  - stage: deploy_function_app
    displayName: 'Deploy Azure Function to Staging'
    dependsOn:
       - update_infrastructure
       - build_application
    variables:
      azureFunctionAppName: $[ stageDependencies.update_infrastructure.Infrastructure.outputs['pulumi.FunctionAppName'] ]
    condition: succeeded()
    jobs:
     - deployment: Deploy
       displayName: "Deploy Azure Function"
       environment: 'development'
       strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureFunctionApp@1
                inputs:
                  azureSubscription: $(azureSubscriptionName)
                  appType: 'functionApp'
                  appName: '$(azureFunctionAppName)'
                  package: '$(Pipeline.Workspace)/WebhookFunction/$(Build.BuildId).zip'
                  deployToSlotOrASE: false
                  deploymentMethod: 'auto'